name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v3.1.0)'
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio build twine
        pip install -e .

    - name: Run full test suite
      run: |
        pytest tests/ -v --tb=short

    - name: Validate version consistency
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from analyzeMFT.constants import VERSION
        from setuptools import find_packages
        import re
        
        # Check setup.py version
        with open('setup.py', 'r') as f:
            setup_content = f.read()
            setup_version = re.search(r\"version=['\\\"]([^'\\\"]+)['\\\"], setup_content).group(1)
        
        # Check README version
        with open('README.md', 'r') as f:
            readme_content = f.read()
            readme_match = re.search(r'Current version: ([0-9.]+)', readme_content)
            readme_version = readme_match.group(1) if readme_match else 'NOT_FOUND'
        
        print(f'Constants VERSION: {VERSION}')
        print(f'Setup.py version: {setup_version}')
        print(f'README version: {readme_version}')
        
        if VERSION != setup_version:
            print('ERROR: Version mismatch between constants.py and setup.py')
            sys.exit(1)
        if VERSION != readme_version:
            print('ERROR: Version mismatch between constants.py and README.md')
            sys.exit(1)
        print('All versions are consistent!')
        "

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-install:
    name: Test Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import analyzeMFT; print('Import successful')"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, test-install]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "## Initial Release" > RELEASE_NOTES.md
          echo "First release of analyzeMFT $TAG_NAME" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## Installation" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "pip install analyzeMFT==$TAG_NAME" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: RELEASE_NOTES.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, build, test-install]
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    environment: pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true